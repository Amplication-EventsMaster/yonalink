/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TranslationKey } from "./TranslationKey";
import { TranslationKeyCountArgs } from "./TranslationKeyCountArgs";
import { TranslationKeyFindManyArgs } from "./TranslationKeyFindManyArgs";
import { TranslationKeyFindUniqueArgs } from "./TranslationKeyFindUniqueArgs";
import { CreateTranslationKeyArgs } from "./CreateTranslationKeyArgs";
import { UpdateTranslationKeyArgs } from "./UpdateTranslationKeyArgs";
import { DeleteTranslationKeyArgs } from "./DeleteTranslationKeyArgs";
import { TranslationValueFindManyArgs } from "../../translationValue/base/TranslationValueFindManyArgs";
import { TranslationValue } from "../../translationValue/base/TranslationValue";
import { Organization } from "../../organization/base/Organization";
import { TranslationKeyService } from "../translationKey.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TranslationKey)
export class TranslationKeyResolverBase {
  constructor(
    protected readonly service: TranslationKeyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TranslationKey",
    action: "read",
    possession: "any",
  })
  async _translationKeysMeta(
    @graphql.Args() args: TranslationKeyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TranslationKey])
  @nestAccessControl.UseRoles({
    resource: "TranslationKey",
    action: "read",
    possession: "any",
  })
  async translationKeys(
    @graphql.Args() args: TranslationKeyFindManyArgs
  ): Promise<TranslationKey[]> {
    return this.service.translationKeys(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TranslationKey, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TranslationKey",
    action: "read",
    possession: "own",
  })
  async translationKey(
    @graphql.Args() args: TranslationKeyFindUniqueArgs
  ): Promise<TranslationKey | null> {
    const result = await this.service.translationKey(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TranslationKey)
  @nestAccessControl.UseRoles({
    resource: "TranslationKey",
    action: "create",
    possession: "any",
  })
  async createTranslationKey(
    @graphql.Args() args: CreateTranslationKeyArgs
  ): Promise<TranslationKey> {
    return await this.service.createTranslationKey({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TranslationKey)
  @nestAccessControl.UseRoles({
    resource: "TranslationKey",
    action: "update",
    possession: "any",
  })
  async updateTranslationKey(
    @graphql.Args() args: UpdateTranslationKeyArgs
  ): Promise<TranslationKey | null> {
    try {
      return await this.service.updateTranslationKey({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TranslationKey)
  @nestAccessControl.UseRoles({
    resource: "TranslationKey",
    action: "delete",
    possession: "any",
  })
  async deleteTranslationKey(
    @graphql.Args() args: DeleteTranslationKeyArgs
  ): Promise<TranslationKey | null> {
    try {
      return await this.service.deleteTranslationKey(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [TranslationValue], { name: "translationValues" })
  @nestAccessControl.UseRoles({
    resource: "TranslationValue",
    action: "read",
    possession: "any",
  })
  async findTranslationValues(
    @graphql.Parent() parent: TranslationKey,
    @graphql.Args() args: TranslationValueFindManyArgs
  ): Promise<TranslationValue[]> {
    const results = await this.service.findTranslationValues(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  @nestAccessControl.UseRoles({
    resource: "Organization",
    action: "read",
    possession: "any",
  })
  async getOrganization(
    @graphql.Parent() parent: TranslationKey
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
