/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TranslationKey as PrismaTranslationKey,
  TranslationValue as PrismaTranslationValue,
  Category as PrismaCategory,
  Organization as PrismaOrganization,
} from "@prisma/client";

export class TranslationKeyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TranslationKeyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.translationKey.count(args);
  }

  async translationKeys(
    args: Prisma.TranslationKeyFindManyArgs
  ): Promise<PrismaTranslationKey[]> {
    return this.prisma.translationKey.findMany(args);
  }
  async translationKey(
    args: Prisma.TranslationKeyFindUniqueArgs
  ): Promise<PrismaTranslationKey | null> {
    return this.prisma.translationKey.findUnique(args);
  }
  async createTranslationKey(
    args: Prisma.TranslationKeyCreateArgs
  ): Promise<PrismaTranslationKey> {
    return this.prisma.translationKey.create(args);
  }
  async updateTranslationKey(
    args: Prisma.TranslationKeyUpdateArgs
  ): Promise<PrismaTranslationKey> {
    return this.prisma.translationKey.update(args);
  }
  async deleteTranslationKey(
    args: Prisma.TranslationKeyDeleteArgs
  ): Promise<PrismaTranslationKey> {
    return this.prisma.translationKey.delete(args);
  }

  async findTranslationValues(
    parentId: string,
    args: Prisma.TranslationValueFindManyArgs
  ): Promise<PrismaTranslationValue[]> {
    return this.prisma.translationKey
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .translationValues(args);
  }

  async getCategory(parentId: string): Promise<PrismaCategory | null> {
    return this.prisma.translationKey
      .findUnique({
        where: { id: parentId },
      })
      .category();
  }

  async getOrganization(parentId: string): Promise<PrismaOrganization | null> {
    return this.prisma.translationKey
      .findUnique({
        where: { id: parentId },
      })
      .organization();
  }
}
