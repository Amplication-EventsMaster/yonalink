/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TranslationKeyService } from "../translationKey.service";
import { TranslationKeyCreateInput } from "./TranslationKeyCreateInput";
import { TranslationKey } from "./TranslationKey";
import { TranslationKeyFindManyArgs } from "./TranslationKeyFindManyArgs";
import { TranslationKeyWhereUniqueInput } from "./TranslationKeyWhereUniqueInput";
import { TranslationKeyUpdateInput } from "./TranslationKeyUpdateInput";
import { TranslationValueFindManyArgs } from "../../translationValue/base/TranslationValueFindManyArgs";
import { TranslationValue } from "../../translationValue/base/TranslationValue";
import { TranslationValueWhereUniqueInput } from "../../translationValue/base/TranslationValueWhereUniqueInput";

export class TranslationKeyControllerBase {
  constructor(protected readonly service: TranslationKeyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TranslationKey })
  async createTranslationKey(
    @common.Body() data: TranslationKeyCreateInput
  ): Promise<TranslationKey> {
    return await this.service.createTranslationKey({
      data: {
        ...data,

        organization: data.organization
          ? {
              connect: data.organization,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        id: true,
        key: true,

        organization: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TranslationKey] })
  @ApiNestedQuery(TranslationKeyFindManyArgs)
  async translationKeys(
    @common.Req() request: Request
  ): Promise<TranslationKey[]> {
    const args = plainToClass(TranslationKeyFindManyArgs, request.query);
    return this.service.translationKeys({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        key: true,

        organization: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TranslationKey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async translationKey(
    @common.Param() params: TranslationKeyWhereUniqueInput
  ): Promise<TranslationKey | null> {
    const result = await this.service.translationKey({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        key: true,

        organization: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TranslationKey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTranslationKey(
    @common.Param() params: TranslationKeyWhereUniqueInput,
    @common.Body() data: TranslationKeyUpdateInput
  ): Promise<TranslationKey | null> {
    try {
      return await this.service.updateTranslationKey({
        where: params,
        data: {
          ...data,

          organization: data.organization
            ? {
                connect: data.organization,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          id: true,
          key: true,

          organization: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TranslationKey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTranslationKey(
    @common.Param() params: TranslationKeyWhereUniqueInput
  ): Promise<TranslationKey | null> {
    try {
      return await this.service.deleteTranslationKey({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          key: true,

          organization: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/translationValues")
  @ApiNestedQuery(TranslationValueFindManyArgs)
  async findTranslationValues(
    @common.Req() request: Request,
    @common.Param() params: TranslationKeyWhereUniqueInput
  ): Promise<TranslationValue[]> {
    const query = plainToClass(TranslationValueFindManyArgs, request.query);
    const results = await this.service.findTranslationValues(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        language: {
          select: {
            id: true,
          },
        },

        translationKey: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        value: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/translationValues")
  async connectTranslationValues(
    @common.Param() params: TranslationKeyWhereUniqueInput,
    @common.Body() body: TranslationValueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      translationValues: {
        connect: body,
      },
    };
    await this.service.updateTranslationKey({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/translationValues")
  async updateTranslationValues(
    @common.Param() params: TranslationKeyWhereUniqueInput,
    @common.Body() body: TranslationValueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      translationValues: {
        set: body,
      },
    };
    await this.service.updateTranslationKey({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/translationValues")
  async disconnectTranslationValues(
    @common.Param() params: TranslationKeyWhereUniqueInput,
    @common.Body() body: TranslationValueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      translationValues: {
        disconnect: body,
      },
    };
    await this.service.updateTranslationKey({
      where: params,
      data,
      select: { id: true },
    });
  }
}
