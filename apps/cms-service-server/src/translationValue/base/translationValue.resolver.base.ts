/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TranslationValue } from "./TranslationValue";
import { TranslationValueCountArgs } from "./TranslationValueCountArgs";
import { TranslationValueFindManyArgs } from "./TranslationValueFindManyArgs";
import { TranslationValueFindUniqueArgs } from "./TranslationValueFindUniqueArgs";
import { CreateTranslationValueArgs } from "./CreateTranslationValueArgs";
import { UpdateTranslationValueArgs } from "./UpdateTranslationValueArgs";
import { DeleteTranslationValueArgs } from "./DeleteTranslationValueArgs";
import { Language } from "../../language/base/Language";
import { TranslationKey } from "../../translationKey/base/TranslationKey";
import { TranslationValueService } from "../translationValue.service";
@graphql.Resolver(() => TranslationValue)
export class TranslationValueResolverBase {
  constructor(protected readonly service: TranslationValueService) {}

  async _translationValuesMeta(
    @graphql.Args() args: TranslationValueCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TranslationValue])
  async translationValues(
    @graphql.Args() args: TranslationValueFindManyArgs
  ): Promise<TranslationValue[]> {
    return this.service.translationValues(args);
  }

  @graphql.Query(() => TranslationValue, { nullable: true })
  async translationValue(
    @graphql.Args() args: TranslationValueFindUniqueArgs
  ): Promise<TranslationValue | null> {
    const result = await this.service.translationValue(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TranslationValue)
  async createTranslationValue(
    @graphql.Args() args: CreateTranslationValueArgs
  ): Promise<TranslationValue> {
    return await this.service.createTranslationValue({
      ...args,
      data: {
        ...args.data,

        language: args.data.language
          ? {
              connect: args.data.language,
            }
          : undefined,

        translationKey: args.data.translationKey
          ? {
              connect: args.data.translationKey,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TranslationValue)
  async updateTranslationValue(
    @graphql.Args() args: UpdateTranslationValueArgs
  ): Promise<TranslationValue | null> {
    try {
      return await this.service.updateTranslationValue({
        ...args,
        data: {
          ...args.data,

          language: args.data.language
            ? {
                connect: args.data.language,
              }
            : undefined,

          translationKey: args.data.translationKey
            ? {
                connect: args.data.translationKey,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TranslationValue)
  async deleteTranslationValue(
    @graphql.Args() args: DeleteTranslationValueArgs
  ): Promise<TranslationValue | null> {
    try {
      return await this.service.deleteTranslationValue(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Language, {
    nullable: true,
    name: "language",
  })
  async getLanguage(
    @graphql.Parent() parent: TranslationValue
  ): Promise<Language | null> {
    const result = await this.service.getLanguage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => TranslationKey, {
    nullable: true,
    name: "translationKey",
  })
  async getTranslationKey(
    @graphql.Parent() parent: TranslationValue
  ): Promise<TranslationKey | null> {
    const result = await this.service.getTranslationKey(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
