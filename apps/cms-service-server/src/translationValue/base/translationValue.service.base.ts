/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TranslationValue as PrismaTranslationValue,
  Language as PrismaLanguage,
  TranslationKey as PrismaTranslationKey,
} from "@prisma/client";

export class TranslationValueServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TranslationValueCountArgs, "select">
  ): Promise<number> {
    return this.prisma.translationValue.count(args);
  }

  async translationValues(
    args: Prisma.TranslationValueFindManyArgs
  ): Promise<PrismaTranslationValue[]> {
    return this.prisma.translationValue.findMany(args);
  }
  async translationValue(
    args: Prisma.TranslationValueFindUniqueArgs
  ): Promise<PrismaTranslationValue | null> {
    return this.prisma.translationValue.findUnique(args);
  }
  async createTranslationValue(
    args: Prisma.TranslationValueCreateArgs
  ): Promise<PrismaTranslationValue> {
    return this.prisma.translationValue.create(args);
  }
  async updateTranslationValue(
    args: Prisma.TranslationValueUpdateArgs
  ): Promise<PrismaTranslationValue> {
    return this.prisma.translationValue.update(args);
  }
  async deleteTranslationValue(
    args: Prisma.TranslationValueDeleteArgs
  ): Promise<PrismaTranslationValue> {
    return this.prisma.translationValue.delete(args);
  }

  async getLanguage(parentId: string): Promise<PrismaLanguage | null> {
    return this.prisma.translationValue
      .findUnique({
        where: { id: parentId },
      })
      .language();
  }

  async getTranslationKey(
    parentId: string
  ): Promise<PrismaTranslationKey | null> {
    return this.prisma.translationValue
      .findUnique({
        where: { id: parentId },
      })
      .translationKey();
  }
}
